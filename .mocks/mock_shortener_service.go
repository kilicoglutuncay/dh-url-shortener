// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/shortener.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "dh-url-shortener/internal/api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockDB) Data() map[string]model.RedirectionData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string]model.RedirectionData)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockDBMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockDB)(nil).Data))
}

// Get mocks base method.
func (m *MockDB) Get(arg0 string) (model.RedirectionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(model.RedirectionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), arg0)
}

// Hit mocks base method.
func (m *MockDB) Hit(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hit indicates an expected call of Hit.
func (mr *MockDBMockRecorder) Hit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockDB)(nil).Hit), arg0)
}

// Restore mocks base method.
func (m *MockDB) Restore(arg0 map[string]model.RedirectionData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restore", arg0)
}

// Restore indicates an expected call of Restore.
func (mr *MockDBMockRecorder) Restore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockDB)(nil).Restore), arg0)
}

// Set mocks base method.
func (m *MockDB) Set(arg0 string, arg1 model.RedirectionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockDBMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDB)(nil).Set), arg0, arg1)
}
